// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("PRISMA_DATABASE_URL")
}

model Category {
    id          String    @id @default(uuid())
    name        String    @db.VarChar(20)
    description String    @db.VarChar(200)
    enabled     Boolean
    products    Product[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Customer {
    id        String    @id @default(uuid())
    email     String    @db.VarChar(50)
    username  String    @db.VarChar(15)
    password  String    @db.VarChar(20)
    name      String    @db.VarChar(200)
    cpf       String    @unique @db.VarChar(11)
    phone     String?   @db.VarChar(11)
    birthdate DateTime? @db.Date
    addresses Address[]
    orders    Order[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Address {
    id           String   @id @default(uuid())
    zipCode      String   @db.VarChar(9)
    street       String   @db.VarChar(100)
    neighborhood String   @db.VarChar(30)
    city         String   @db.VarChar(30)
    number       String   @db.VarChar(10)
    complement   String?  @db.VarChar(100)
    state        String   @db.VarChar(2)
    customerId   String
    customer     Customer @relation(fields: [customerId], references: [id])
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Order {
    id            String         @id @default(uuid())
    orderNumber   Int
    totalValue    Decimal
    date          DateTime       @default(now()) @db.Date
    status        Boolean
    customerId    String
    customer      Customer       @relation(fields: [customerId], references: [id])
    productOrders ProductOrder[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

model Product {
    id               String         @id @default(uuid())
    name             String         @db.VarChar(50)
    description      String         @db.VarChar(200)
    price            Float
    enabled          Boolean
    stockQuantity    Int
    registrationDate DateTime       @default(now()) @db.Date
    categoryId       String
    category         Category       @relation(fields: [categoryId], references: [id])
    productOrders    ProductOrder[]
    image            String
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
}

model ProductOrder {
    id        String   @id @default(uuid())
    quantity  Int
    price     Float
    productId String
    orderId   String
    product   Product  @relation(fields: [productId], references: [id])
    order     Order    @relation(fields: [orderId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
